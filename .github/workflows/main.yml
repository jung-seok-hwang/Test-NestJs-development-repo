# name: Deploy to ECR and EC2

# on:
#   push:
#     branches: [ main ]

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-2

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push image to Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: my-ecr-repo
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker build -t bapull-nest .
#         docker tag bapull-nest:latest 590183693934.dkr.ecr.us-east-1.amazonaws.com/bapull-nest:latest
#         docker push 590183693934.dkr.ecr.us-east-1.amazonaws.com/bapull-nest:latest

#     - name: Deploy to EC2
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: my-ecr-repo
#         IMAGE_TAG: ${{ github.sha }}
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.EC2_HOST }}
#         username: ${{ secrets.EC2_USERNAME }}
#         key: ${{ secrets.EC2_SSH_KEY }}
#         envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
#         script: |
#           # ECR 로그인
#           aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY
          
#           # 새 이미지 풀
#           docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
#           # 기존 컨테이너 중지 및 제거
#           docker stop my-container || true
#           docker rm my-container || true
          
#           # 새 컨테이너 실행
#           docker run -d --name my-container -p 80:3000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
#           # 사용하지 않는 이미지 정리
#           docker image prune -af